set nocompatible              " required
filetype off                  " required


" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()


" let Vundle manage Vundle, required
Plugin 'gmarik/vundle'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)
Plugin 'ervandew/supertab' " use tab for completion
Plugin 'preservim/nerdcommenter'
Plugin 'preservim/nerdtree'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plugin 'mg979/vim-visual-multi'
Plugin 'dense-analysis/ale' " ALE
Plugin 'puremourning/vimspector'
Plugin 'vim-test/vim-test'
Plugin 'tpope/vim-dispatch'

call vundle#end()            " required


let local_file = substitute(resolve($MYVIMRC), 'vimrc.txt$', 'local.vim', '')
execute 'source ' . local_file

"For vim-airline
let g:airline_theme='badwolf'


set encoding=utf-8

syntax on

set colorcolumn=120
set number
set relativenumber
set tabstop=4
set shiftwidth=4
set expandtab
set autoindent


"For pymode
let g:pymode_indent = 1
let g:pymode_options_max_line_length = 120
let g:pymode_rope = 1
let g:pymode_rope_autoimport=1
let g:pymode_rope_autoimport_modules = ['__future__', 'builtins', '_io', 'abc', 'collections', 'copy', 'math', 're', 'sys', 'time', 'typing', 'functools', 'operator', 'random', 'json', 'os', 'socket', 'subprocess', 'warnings', 'yaml', 'numpy', 'pandas', 'scipy', 'sklearn', 'matplotlib', 'seaborn']



" ALE
let g:ale_linters = {'python': ['pylsp']}
let g:ale_max_line_length = 120

:map gd :ALEGoToDefinition<CR>
:map gr :ALEFindReference<CR>
:map gl :ALENext<CR>


"vimspector
let g:vimspector_enable_mappings = 'HUMAN'
let g:vimspector_install_gadgets = [ 'debugpy' ]

" Vim-test
let test#python#runner = 'pytest'
let g:test#strategy = "dispatch"
let test#vim#term_position = "vert"


"set mouse=a
:map FL mn/_pytest<CR>xwxde`n

:vmap <C-i>' c''<ESC>P
:vmap <C-i>" c""<ESC>P
:vmap <C-i>( c()<ESC>P
:vmap <C-i>[ c[]<ESC>P
:vmap <C-i>{ c{}<ESC>P
:vmap <C-i>< c<><ESC>P
:map cx{ ma%r}`ar{
:map cx[ ma%r]`ar[
:map cx' ma%r'`ar'
:map cx" ma%r"`ar"
:map cx( ma%r)`ar(
:map di<space> F<space>dt<space>
:map ci<space> F<space>ct<space>

:command Lxml :%!xmlstarlet fo
:command Ljson :%!json_pp

:command Srn :set relativenumber
:command Snrn :set norelativenumber

function! CreateClass()
    " Récupérer le nom du fichier
    let l:filename = expand('%:t:r')
    " Convertir en camel case
    let l:class_name = substitute(l:filename, '_\(\w\)', '\u\1', 'g')
    let l:class_name = substitute(l:class_name, '\(^.\)', '\u\0', '')
    " Créer la classe
    execute "normal! iclass " . l:class_name . ":\r\tdef __init__(self):\r\tpass\r"
endfunction

command! CreateClass :call CreateClass()

